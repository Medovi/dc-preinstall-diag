#!/bin/bash
# Copyright (C) 2024 Evgeny Sinelnikov <sin@altlinux.org>
# Copyright (C) 2024 Sergey Savelev <savelevsa@basealt.ru>
#
# A system health diagnostic tool before installing the first domain controller
#
# This program is free software: you can redistribute it and/or modify
#
# SPDX-License-Identifier: GNU GPL v3.0

set -euo pipefail

. shell-getopt

readonly PROG_NAME="${0##*/}"
readonly VERSION="0.0.1"
readonly task_list="$*"
cmd="run"

# Function for displaying the program version
print_version(){
    cat <<EOF
Версия программы $PROG_NAME - $VERSION
EOF
    exit 0
}

# A function for displaying background information
show_usage(){
    cat <<EOF
$PROG_NAME - инструмент диагностики состояния системы перед установкой первого контроллера домена

Формат вызова: $PROG_NAME [options] [<diagnostic-task>]

Опции:
    -l, --list<><------><------>Список диагностических задач
    -v, --version<-----><------>Вывод версии утилиты
    -h, --help<><------><------>Показать данную справку и выйти
EOF
    exit 0
}

readonly TEMP=$(getopt -n "${0##*/}" -o "l,v,r,h", -l "list,version,report,help" -- "$@") || show_usage
eval set -- "$TEMP"

while true; do
    case "$1" in
	-l|--list)
	    cmd="list"
	    shift
	    ;;
	-v|--version)
	    print_version
	    shift
	    ;;
	-r|--report)
	    shift
	    ;;
	-h|--help)
	    show_usage
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    fatal "Unrecognized option: $1"
	    ;;
    esac
done

# A function for displaying a list of tests
task_show(){
    local func="$1"
    echo "$func"
}

# Function for running tests
task_run(){
    local retval=126
    local func="$1"

    if test -n "$task_list"; then
	echo "$task_list" | tr ' ' '\n' | grep -q "^$func\$" || return 0
    fi

    $func && retval=0 || retval="$?"
    test $retval=0

    return $retval
}

# Depending on the parameter of the cmd variable, the function decides what to run
task(){
    local task="$1"

    case "$cmd" in
	list)
	    task_show "$task"
	    ;;
	report)
	    ;;
# Here, add a condition for the error code (output [WARN] when the error code of the test = 2)
	run)
	    task_run "$task" && echo "[DONE]: $task" || echo "[FAIL]: $task"
	    ;;
	*)
	    fatal "Unrecognized command: $cmd"
	    ;;
    esac
}

# Checking the availability of the task-samba-dc package
check_task_samba_dc(){
    local retval=0
    local packet_name="task-samba-dc"
    local policy_output="$(rpm -qi "$packet_name" 2> /dev/null)"
    local version="$(echo "$policy_output" | grep "Version" | awk '{print $NF}')"
    local release="$(echo "$policy_output" | grep "Release" | awk '{print $NF}')"
    local tag="$(echo "$policy_output" | grep "DistTag" | awk '{print $NF}')"

    if [ -z "$version" ] && [ -z "$release" ] && [ -z "$tag" ]; then
	retval=1
    fi

    return $retval
}

# A function that checks the activity of the "smb", "nmb", "krb5kdc" and "slapd" services
check_active_services(){
    local retval=0
    local retvals=()
    local outputs=()
    local services=()

    services[0]="smb.service"
    services[1]="nmb.service"
    services[2]="krb5kdc.service"
    services[3]="slapd.service"

    for (( i=0; i < ${#services[@]}; i++ )); do
	outputs[$i]="$(systemctl status "${services[$i]}" 2> /dev/null)"
	
	if [[ "${outputs[$i]}" == *"Active: active (running)"* ]]; then
	    retvals[$i]=0
	elif [[ "{$outputs[$i]}" == *"Active: inactive (dead)"* ]]; then
	    retvals[$i]=2
	else
	    retvals[$i]=1
	fi
    done

    for val in "${retvals[@]}"; do
	if [[ $val -eq 1 ]]; then
	    retval=1
	    break
	elif [[ $val -eq 2 ]] && [[ $retval -ne 1 ]]; then
	    retval=2
	elif [[ $val -eq 0 ]] && [[ $retval -ne 1 ]] && [[ $retval -ne 2 ]]; then
	    retval=0
	fi
    done

    return $retval
}

# Checking the existence of the smb.conf file
check_samba_config(){
    local retval=0
    local file_config="/etc/samba/smb.conf"

    if [[ -s "$file_config" ]]; then
	retval=0
    else
	retval=2
    fi

    return $retval
}

# Checking the full domain name of the host (FQDN)
check_hostname(){
    local retval=0
    local host="$(hostname -f)"

    { [[ "$host" == *.* ]] && [[ "$host" != $.* ]] && [[ "$(host "$host")" ]]; } || retval=2

    return $retval
}

# Checking the content of the .local suffix in the domain name of the host
check_local_in_domain_name(){
    local retval=0
    local host="$(hostname -f)"
    local suffix=".local"

    [[ "$host" != *"$suffix"* ]] || retval=2

    return $retval
}

task check_task_samba_dc
task check_active_services
task check_samba_config
task check_hostname
task check_local_in_domain_name
